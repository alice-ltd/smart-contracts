{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MetaTx",
  "type": "object",
  "required": [
    "chain_id",
    "contract",
    "msg",
    "nonce"
  ],
  "properties": {
    "chain_id": {
      "description": "chain ID",
      "type": "string"
    },
    "contract": {
      "description": "contract address",
      "type": "string"
    },
    "msg": {
      "description": "must not be ExecuteMsg::Relay",
      "allOf": [
        {
          "$ref": "#/definitions/ExecuteMsg"
        }
      ]
    },
    "nonce": {
      "description": "starts at 1",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "tip": {
      "description": "tip in ualiceUST that user pays, default is 0",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "ExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "relay"
          ],
          "properties": {
            "relay": {
              "type": "object",
              "required": [
                "meta_tx",
                "public_key",
                "signature"
              ],
              "properties": {
                "meta_tx": {
                  "description": "MetaTx JSON serialized",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "public_key": {
                  "description": "Serialized compressed (33 bytes) or uncompressed (65 bytes) public key.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "signature": {
                  "description": "Serialized signature. Cosmos format (64 bytes).",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Use a SendAuthorization to retrieve the stablecoin amount from 'sender' Only executable by owner",
          "type": "object",
          "required": [
            "deposit_stable_authorized"
          ],
          "properties": {
            "deposit_stable_authorized": {
              "type": "object",
              "required": [
                "amount",
                "recipient",
                "sender"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "recipient": {
                  "type": "string"
                },
                "sender": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "MUST be the config stable denomination",
          "type": "object",
          "required": [
            "deposit_stable"
          ],
          "properties": {
            "deposit_stable": {
              "type": "object",
              "properties": {
                "recipient": {
                  "description": "Default is tx sender",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "redeem_stable"
          ],
          "properties": {
            "redeem_stable": {
              "type": "object",
              "required": [
                "burn_amount"
              ],
              "properties": {
                "burn_amount": {
                  "description": "Amount in aliceUST",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "recipient": {
                  "description": "Default is tx sender",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Implements CW20. Transfer is a base message to move tokens to another account without triggering actions",
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "amount",
                "recipient"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "recipient": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Implements CW20. Burn is a base message to destroy tokens forever",
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Implements CW20.  Send is a base message to transfer tokens to a contract and trigger an action on the receiving contract.",
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "amount",
                "contract",
                "msg"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "contract": {
                  "type": "string"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
